/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */


import * as runtime from '../../runtime';
import type {
  ChannelsCategories,
  Currency,
  DateRangeFilter,
  ServerError,
  TransactionResponse,
  TransactionStatuses,
  TransactionTypes,
  TransactionsResponse,
  ValidationError,
} from '../models';
import {
    ChannelsCategoriesFromJSON,
    ChannelsCategoriesToJSON,
    CurrencyFromJSON,
    CurrencyToJSON,
    DateRangeFilterFromJSON,
    DateRangeFilterToJSON,
    ServerErrorFromJSON,
    ServerErrorToJSON,
    TransactionResponseFromJSON,
    TransactionResponseToJSON,
    TransactionStatusesFromJSON,
    TransactionStatusesToJSON,
    TransactionTypesFromJSON,
    TransactionTypesToJSON,
    TransactionsResponseFromJSON,
    TransactionsResponseToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface GetTransactionByIDRequest {
    id: string;
    forUserId?: string;
}

export interface GetAllTransactionsRequest {
    forUserId?: string;
    types?: Array<TransactionTypes>;
    statuses?: Array<TransactionStatuses>;
    channelCategories?: Array<ChannelsCategories>;
    referenceId?: string;
    productId?: string;
    accountIdentifier?: string;
    amount?: number;
    currency?: Currency;
    created?: DateRangeFilter;
    updated?: DateRangeFilter;
    limit?: number;
    afterId?: string;
    beforeId?: string;
}

/**
 * 
 */
export class TransactionApi extends runtime.BaseAPI {

    secretKey: string = "";
    xenditURL: string = "";

    constructor({secretKey, xenditURL}: {secretKey: string, xenditURL?: string}) {
        const conf = new runtime.Configuration({
            basePath: xenditURL || 'https://api.xendit.co'
        })
        super(conf)
        this.secretKey = secretKey;
    }

    /**
     * Get single specific transaction by transaction id.
     * Get a transaction based on its id
     */
    private async getTransactionByIDRaw(requestParameters: GetTransactionByIDRequest): Promise<runtime.ApiResponse<TransactionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTransactionByID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }

        const response = await this.request({
            path: `/transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionResponseFromJSON(jsonValue));
    }

    /**
     * Get single specific transaction by transaction id.
     * Get a transaction based on its id
     */
    async getTransactionByID(requestParameters: GetTransactionByIDRequest): Promise<TransactionResponse> {
        const response = await this.getTransactionByIDRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of all transactions based on filter and search parameters.
     * Get a list of transactions
     */
    private async getAllTransactionsRaw(requestParameters: GetAllTransactionsRequest): Promise<runtime.ApiResponse<TransactionsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.types) {
            queryParameters['types'] = requestParameters.types;
        }

        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        if (requestParameters.channelCategories) {
            queryParameters['channel_categories'] = requestParameters.channelCategories;
        }

        if (requestParameters.referenceId !== undefined) {
            queryParameters['reference_id'] = requestParameters.referenceId;
        }

        if (requestParameters.productId !== undefined) {
            queryParameters['product_id'] = requestParameters.productId;
        }

        if (requestParameters.accountIdentifier !== undefined) {
            queryParameters['account_identifier'] = requestParameters.accountIdentifier;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }

        if (requestParameters.created !== undefined) {
            queryParameters['created'] = requestParameters.created;
        }

        if (requestParameters.updated !== undefined) {
            queryParameters['updated'] = requestParameters.updated;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }

        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }

        const response = await this.request({
            path: `/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all transactions based on filter and search parameters.
     * Get a list of transactions
     */
    async getAllTransactions(requestParameters: GetAllTransactionsRequest = {}): Promise<TransactionsResponse> {
        const response = await this.getAllTransactionsRaw(requestParameters);
        return await response.value();
    }

}
