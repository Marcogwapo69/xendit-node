/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { AddressStatus } from './AddressStatus';
import {
    AddressStatusFromJSON,
    AddressStatusFromJSONTyped,
    AddressStatusToJSON,
} from './AddressStatus';

/**
 * 
 * @export
 * @interface AddressRequest
 */
export interface AddressRequest {
    /**
     * Home, work or provincial
     * @type {string}
     * @memberof AddressRequest
     */
    category?: string;
    /**
     * ISO3166-2 country code
     * @type {string}
     * @memberof AddressRequest
     */
    countryCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddressRequest
     */
    provinceState?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressRequest
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressRequest
     */
    suburb?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressRequest
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressRequest
     */
    line1?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressRequest
     */
    line2?: string;
    /**
     * 
     * @type {AddressStatus}
     * @memberof AddressRequest
     */
    status?: AddressStatus | null;
    /**
     * 
     * @type {boolean}
     * @memberof AddressRequest
     */
    isPrimary?: boolean;
}

/**
 * Check if a given object implements the AddressRequest interface.
 */
export function instanceOfAddressRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AddressRequestFromJSON(json: any): AddressRequest {
    return AddressRequestFromJSONTyped(json, false);
}

export function AddressRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddressRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'category': !exists(json, 'category') ? undefined : json['category'],
        'countryCode': !exists(json, 'country_code') ? undefined : json['country_code'],
        'provinceState': !exists(json, 'province_state') ? undefined : json['province_state'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'suburb': !exists(json, 'suburb') ? undefined : json['suburb'],
        'postalCode': !exists(json, 'postal_code') ? undefined : json['postal_code'],
        'line1': !exists(json, 'line_1') ? undefined : json['line_1'],
        'line2': !exists(json, 'line_2') ? undefined : json['line_2'],
        'status': !exists(json, 'status') ? undefined : AddressStatusFromJSON(json['status']),
        'isPrimary': !exists(json, 'is_primary') ? undefined : json['is_primary'],
    };
}

export function AddressRequestToJSON(value?: AddressRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'category': value.category,
        'country_code': value.countryCode,
        'province_state': value.provinceState,
        'city': value.city,
        'suburb': value.suburb,
        'postal_code': value.postalCode,
        'line_1': value.line1,
        'line_2': value.line2,
        'status': AddressStatusToJSON(value.status),
        'is_primary': value.isPrimary,
    };
}

