/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { IdentityAccountRequestProperties } from './IdentityAccountRequestProperties';
import {
    IdentityAccountRequestPropertiesFromJSON,
    IdentityAccountRequestPropertiesFromJSONTyped,
    IdentityAccountRequestPropertiesToJSON,
} from './IdentityAccountRequestProperties';
import type { IdentityAccountType } from './IdentityAccountType';
import {
    IdentityAccountTypeFromJSON,
    IdentityAccountTypeFromJSONTyped,
    IdentityAccountTypeToJSON,
} from './IdentityAccountType';

/**
 * 
 * @export
 * @interface IdentityAccountRequest
 */
export interface IdentityAccountRequest {
    /**
     * 
     * @type {IdentityAccountType}
     * @memberof IdentityAccountRequest
     */
    type?: IdentityAccountType;
    /**
     * The issuing institution associated with the account (e.g., OCBC, GOPAY, 7-11). If adding financial accounts that Xendit supports, we recommend you use the channel_name found at https://xendit.github.io/apireference/#payment-channels for this field
     * @type {string}
     * @memberof IdentityAccountRequest
     */
    company?: string;
    /**
     * Free text description of this account
     * @type {string}
     * @memberof IdentityAccountRequest
     */
    description?: string;
    /**
     * ISO3166-2 country code
     * @type {string}
     * @memberof IdentityAccountRequest
     */
    country?: string | null;
    /**
     * 
     * @type {IdentityAccountRequestProperties}
     * @memberof IdentityAccountRequest
     */
    properties?: IdentityAccountRequestProperties;
}

/**
 * Check if a given object implements the IdentityAccountRequest interface.
 */
export function instanceOfIdentityAccountRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IdentityAccountRequestFromJSON(json: any): IdentityAccountRequest {
    return IdentityAccountRequestFromJSONTyped(json, false);
}

export function IdentityAccountRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityAccountRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : IdentityAccountTypeFromJSON(json['type']),
        'company': !exists(json, 'company') ? undefined : json['company'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'properties': !exists(json, 'properties') ? undefined : IdentityAccountRequestPropertiesFromJSON(json['properties']),
    };
}

export function IdentityAccountRequestToJSON(value?: IdentityAccountRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': IdentityAccountTypeToJSON(value.type),
        'company': value.company,
        'description': value.description,
        'country': value.country,
        'properties': IdentityAccountRequestPropertiesToJSON(value.properties),
    };
}

