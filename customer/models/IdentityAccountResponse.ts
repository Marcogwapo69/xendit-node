/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { IdentityAccountResponseProperties } from './IdentityAccountResponseProperties';
import {
    IdentityAccountResponsePropertiesFromJSON,
    IdentityAccountResponsePropertiesFromJSONTyped,
    IdentityAccountResponsePropertiesToJSON,
} from './IdentityAccountResponseProperties';

/**
 * 
 * @export
 * @interface IdentityAccountResponse
 */
export interface IdentityAccountResponse {
    /**
     * 
     * @type {string}
     * @memberof IdentityAccountResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentityAccountResponse
     */
    code?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdentityAccountResponse
     */
    company: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdentityAccountResponse
     */
    description: string | null;
    /**
     * ISO3166-2 country code
     * @type {string}
     * @memberof IdentityAccountResponse
     */
    country: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdentityAccountResponse
     */
    holderName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdentityAccountResponse
     */
    type: IdentityAccountResponseTypeEnum;
    /**
     * 
     * @type {IdentityAccountResponseProperties}
     * @memberof IdentityAccountResponse
     */
    properties: IdentityAccountResponseProperties;
    /**
     * 
     * @type {Date}
     * @memberof IdentityAccountResponse
     */
    created?: Date;
}


/**
 * @export
 */
export const IdentityAccountResponseTypeEnum = {
    BankAccount: 'BANK_ACCOUNT',
    Ewallet: 'EWALLET',
    CreditCard: 'CREDIT_CARD',
    Otc: 'OTC',
    QrCode: 'QR_CODE',
    CardlessCredit: 'CARDLESS_CREDIT'
} as const;
export type IdentityAccountResponseTypeEnum = typeof IdentityAccountResponseTypeEnum[keyof typeof IdentityAccountResponseTypeEnum];


/**
 * Check if a given object implements the IdentityAccountResponse interface.
 */
export function instanceOfIdentityAccountResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "company" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "country" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "properties" in value;

    return isInstance;
}

export function IdentityAccountResponseFromJSON(json: any): IdentityAccountResponse {
    return IdentityAccountResponseFromJSONTyped(json, false);
}

export function IdentityAccountResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityAccountResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'company': json['company'],
        'description': json['description'],
        'country': json['country'],
        'holderName': !exists(json, 'holder_name') ? undefined : json['holder_name'],
        'type': json['type'],
        'properties': IdentityAccountResponsePropertiesFromJSON(json['properties']),
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
    };
}

export function IdentityAccountResponseToJSON(value?: IdentityAccountResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'code': value.code,
        'company': value.company,
        'description': value.description,
        'country': value.country,
        'holder_name': value.holderName,
        'type': value.type,
        'properties': IdentityAccountResponsePropertiesToJSON(value.properties),
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
    };
}

