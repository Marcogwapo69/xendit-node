/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { AccountBank } from './AccountBank';
import {
    AccountBankFromJSON,
    AccountBankFromJSONTyped,
    AccountBankToJSON,
} from './AccountBank';
import type { AccountCard } from './AccountCard';
import {
    AccountCardFromJSON,
    AccountCardFromJSONTyped,
    AccountCardToJSON,
} from './AccountCard';
import type { AccountEwallet } from './AccountEwallet';
import {
    AccountEwalletFromJSON,
    AccountEwalletFromJSONTyped,
    AccountEwalletToJSON,
} from './AccountEwallet';
import type { AccountOTC } from './AccountOTC';
import {
    AccountOTCFromJSON,
    AccountOTCFromJSONTyped,
    AccountOTCToJSON,
} from './AccountOTC';
import type { AccountPayLater } from './AccountPayLater';
import {
    AccountPayLaterFromJSON,
    AccountPayLaterFromJSONTyped,
    AccountPayLaterToJSON,
} from './AccountPayLater';
import type { AccountQRCode } from './AccountQRCode';
import {
    AccountQRCodeFromJSON,
    AccountQRCodeFromJSONTyped,
    AccountQRCodeToJSON,
} from './AccountQRCode';

/**
 * 
 * @export
 * @interface IdentityAccountResponseProperties
 */
export interface IdentityAccountResponseProperties {
    /**
     * Unique account identifier as per the bank records.
     * @type {string}
     * @memberof IdentityAccountResponseProperties
     */
    accountNumber?: string;
    /**
     * Name of account holder as per the cardless credit account.
     * @type {string}
     * @memberof IdentityAccountResponseProperties
     */
    accountHolderName?: string | null;
    /**
     * The SWIFT code for international payments
     * @type {string}
     * @memberof IdentityAccountResponseProperties
     */
    swiftCode?: string | null;
    /**
     * Free text account type, e.g., Savings, Transaction, Virtual Account.
     * @type {string}
     * @memberof IdentityAccountResponseProperties
     */
    accountType?: string | null;
    /**
     * Potentially masked account detail, for display purposes only.
     * @type {string}
     * @memberof IdentityAccountResponseProperties
     */
    accountDetails?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdentityAccountResponseProperties
     */
    currency?: string;
    /**
     * The token id returned in tokenisation
     * @type {string}
     * @memberof IdentityAccountResponseProperties
     */
    tokenId?: string;
    /**
     * Complete fixed payment code (including prefix)
     * @type {string}
     * @memberof IdentityAccountResponseProperties
     */
    paymentCode?: string;
    /**
     * YYYY-MM-DD string with expiry date for the payment code
     * @type {string}
     * @memberof IdentityAccountResponseProperties
     */
    expiresAt?: string | null;
    /**
     * String representation of the QR Code image
     * @type {string}
     * @memberof IdentityAccountResponseProperties
     */
    qrString?: string;
    /**
     * Alphanumeric string identifying this account. Usually an email address or phone number.
     * @type {string}
     * @memberof IdentityAccountResponseProperties
     */
    accountId?: string;
}

/**
 * Check if a given object implements the IdentityAccountResponseProperties interface.
 */
export function instanceOfIdentityAccountResponseProperties(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IdentityAccountResponsePropertiesFromJSON(json: any): IdentityAccountResponseProperties {
    return IdentityAccountResponsePropertiesFromJSONTyped(json, false);
}

export function IdentityAccountResponsePropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityAccountResponseProperties {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountNumber': !exists(json, 'account_number') ? undefined : json['account_number'],
        'accountHolderName': !exists(json, 'account_holder_name') ? undefined : json['account_holder_name'],
        'swiftCode': !exists(json, 'swift_code') ? undefined : json['swift_code'],
        'accountType': !exists(json, 'account_type') ? undefined : json['account_type'],
        'accountDetails': !exists(json, 'account_details') ? undefined : json['account_details'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'tokenId': !exists(json, 'token_id') ? undefined : json['token_id'],
        'paymentCode': !exists(json, 'payment_code') ? undefined : json['payment_code'],
        'expiresAt': !exists(json, 'expires_at') ? undefined : json['expires_at'],
        'qrString': !exists(json, 'qr_string') ? undefined : json['qr_string'],
        'accountId': !exists(json, 'account_id') ? undefined : json['account_id'],
    };
}

export function IdentityAccountResponsePropertiesToJSON(value?: IdentityAccountResponseProperties | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'account_number': value.accountNumber,
        'account_holder_name': value.accountHolderName,
        'swift_code': value.swiftCode,
        'account_type': value.accountType,
        'account_details': value.accountDetails,
        'currency': value.currency,
        'token_id': value.tokenId,
        'payment_code': value.paymentCode,
        'expires_at': value.expiresAt,
        'qr_string': value.qrString,
        'account_id': value.accountId,
    };
}

