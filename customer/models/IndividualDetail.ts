/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { EmploymentDetail } from './EmploymentDetail';
import {
    EmploymentDetailFromJSON,
    EmploymentDetailFromJSONTyped,
    EmploymentDetailToJSON,
} from './EmploymentDetail';

/**
 * 
 * @export
 * @interface IndividualDetail
 */
export interface IndividualDetail {
    /**
     * 
     * @type {string}
     * @memberof IndividualDetail
     */
    givenNames?: string;
    /**
     * 
     * @type {string}
     * @memberof IndividualDetail
     */
    givenNamesNonRoman?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualDetail
     */
    middleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualDetail
     */
    surname?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualDetail
     */
    surnameNonRoman?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualDetail
     */
    motherMaidenName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualDetail
     */
    gender?: IndividualDetailGenderEnum;
    /**
     * 
     * @type {string}
     * @memberof IndividualDetail
     */
    dateOfBirth?: string | null;
    /**
     * ISO3166-2 country code
     * @type {string}
     * @memberof IndividualDetail
     */
    nationality?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IndividualDetail
     */
    placeOfBirth?: string | null;
    /**
     * 
     * @type {EmploymentDetail}
     * @memberof IndividualDetail
     */
    employment?: EmploymentDetail | null;
}


/**
 * @export
 */
export const IndividualDetailGenderEnum = {
    Male: 'MALE',
    Female: 'FEMALE',
    Other: 'OTHER'
} as const;
export type IndividualDetailGenderEnum = typeof IndividualDetailGenderEnum[keyof typeof IndividualDetailGenderEnum];


/**
 * Check if a given object implements the IndividualDetail interface.
 */
export function instanceOfIndividualDetail(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IndividualDetailFromJSON(json: any): IndividualDetail {
    return IndividualDetailFromJSONTyped(json, false);
}

export function IndividualDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): IndividualDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'givenNames': !exists(json, 'given_names') ? undefined : json['given_names'],
        'givenNamesNonRoman': !exists(json, 'given_names_non_roman') ? undefined : json['given_names_non_roman'],
        'middleName': !exists(json, 'middle_name') ? undefined : json['middle_name'],
        'surname': !exists(json, 'surname') ? undefined : json['surname'],
        'surnameNonRoman': !exists(json, 'surname_non_roman') ? undefined : json['surname_non_roman'],
        'motherMaidenName': !exists(json, 'mother_maiden_name') ? undefined : json['mother_maiden_name'],
        'gender': !exists(json, 'gender') ? undefined : json['gender'],
        'dateOfBirth': !exists(json, 'date_of_birth') ? undefined : json['date_of_birth'],
        'nationality': !exists(json, 'nationality') ? undefined : json['nationality'],
        'placeOfBirth': !exists(json, 'place_of_birth') ? undefined : json['place_of_birth'],
        'employment': !exists(json, 'employment') ? undefined : EmploymentDetailFromJSON(json['employment']),
    };
}

export function IndividualDetailToJSON(value?: IndividualDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'given_names': value.givenNames,
        'given_names_non_roman': value.givenNamesNonRoman,
        'middle_name': value.middleName,
        'surname': value.surname,
        'surname_non_roman': value.surnameNonRoman,
        'mother_maiden_name': value.motherMaidenName,
        'gender': value.gender,
        'date_of_birth': value.dateOfBirth,
        'nationality': value.nationality,
        'place_of_birth': value.placeOfBirth,
        'employment': EmploymentDetailToJSON(value.employment),
    };
}

