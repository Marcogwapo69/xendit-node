/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */


import * as runtime from '../../runtime';
import type {
  BadRequestError,
  CreateInvoiceRequest,
  ForbiddenError,
  Invoice,
  InvoiceClientType,
  InvoiceError404ResponseDefinition,
  InvoiceNotFoundError,
  InvoiceStatus,
  ServerError,
  UnauthorizedError,
} from '../models';
import {
    BadRequestErrorFromJSON,
    BadRequestErrorToJSON,
    CreateInvoiceRequestFromJSON,
    CreateInvoiceRequestToJSON,
    ForbiddenErrorFromJSON,
    ForbiddenErrorToJSON,
    InvoiceFromJSON,
    InvoiceToJSON,
    InvoiceClientTypeFromJSON,
    InvoiceClientTypeToJSON,
    InvoiceError404ResponseDefinitionFromJSON,
    InvoiceError404ResponseDefinitionToJSON,
    InvoiceNotFoundErrorFromJSON,
    InvoiceNotFoundErrorToJSON,
    InvoiceStatusFromJSON,
    InvoiceStatusToJSON,
    ServerErrorFromJSON,
    ServerErrorToJSON,
    UnauthorizedErrorFromJSON,
    UnauthorizedErrorToJSON,
} from '../models';

export interface CreateInvoiceOperationRequest {
    data: CreateInvoiceRequest;
    forUserId?: string;
}

export interface GetInvoiceByIdRequest {
    invoiceId: string;
    forUserId?: string;
}

export interface GetInvoicesRequest {
    forUserId?: string;
    externalId?: string;
    statuses?: Array<InvoiceStatus>;
    limit?: number;
    createdAfter?: Date;
    createdBefore?: Date;
    paidAfter?: Date;
    paidBefore?: Date;
    expiredAfter?: Date;
    expiredBefore?: Date;
    lastInvoice?: string;
    clientTypes?: Array<InvoiceClientType>;
    paymentChannels?: Array<string>;
    onDemandLink?: string;
    recurringPaymentId?: string;
}

export interface ExpireInvoiceRequest {
    invoiceId: string;
    forUserId?: string;
}

/**
 * 
 */
export class InvoiceApi extends runtime.BaseAPI {

    secretKey: string = "";
    xenditURL: string = "";

    constructor({secretKey, xenditURL}: {secretKey: string, xenditURL?: string}) {
        const conf = new runtime.Configuration({
            basePath: xenditURL || 'https://api.xendit.co'
        })
        super(conf)
        this.secretKey = secretKey;
    }

    /**
     * Create an invoice
     */
    private async createInvoiceRaw(requestParameters: CreateInvoiceOperationRequest): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.data === null || requestParameters.data === undefined) {
            throw new runtime.RequiredError('createInvoiceRequest','Required parameter requestParameters.data was null or undefined when calling createInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }

        const response = await this.request({
            path: `/v2/invoices/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInvoiceRequestToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * Create an invoice
     */
    async createInvoice(requestParameters: CreateInvoiceOperationRequest): Promise<Invoice> {
        const response = await this.createInvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get invoice by invoice id
     */
    private async getInvoiceByIdRaw(requestParameters: GetInvoiceByIdRequest): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling getInvoiceById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }

        const response = await this.request({
            path: `/v2/invoices/{invoice_id}`.replace(`{${"invoice_id"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * Get invoice by invoice id
     */
    async getInvoiceById(requestParameters: GetInvoiceByIdRequest): Promise<Invoice> {
        const response = await this.getInvoiceByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all Invoices
     */
    private async getInvoicesRaw(requestParameters: GetInvoicesRequest): Promise<runtime.ApiResponse<Array<Invoice>>> {
        const queryParameters: any = {};

        if (requestParameters.externalId !== undefined) {
            queryParameters['external_id'] = requestParameters.externalId;
        }

        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['created_after'] = (requestParameters.createdAfter as any).toISOString();
        }

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.paidAfter !== undefined) {
            queryParameters['paid_after'] = (requestParameters.paidAfter as any).toISOString();
        }

        if (requestParameters.paidBefore !== undefined) {
            queryParameters['paid_before'] = (requestParameters.paidBefore as any).toISOString();
        }

        if (requestParameters.expiredAfter !== undefined) {
            queryParameters['expired_after'] = (requestParameters.expiredAfter as any).toISOString();
        }

        if (requestParameters.expiredBefore !== undefined) {
            queryParameters['expired_before'] = (requestParameters.expiredBefore as any).toISOString();
        }

        if (requestParameters.lastInvoice !== undefined) {
            queryParameters['last_invoice'] = requestParameters.lastInvoice;
        }

        if (requestParameters.clientTypes) {
            queryParameters['client_types'] = requestParameters.clientTypes;
        }

        if (requestParameters.paymentChannels) {
            queryParameters['payment_channels'] = requestParameters.paymentChannels;
        }

        if (requestParameters.onDemandLink !== undefined) {
            queryParameters['on_demand_link'] = requestParameters.onDemandLink;
        }

        if (requestParameters.recurringPaymentId !== undefined) {
            queryParameters['recurring_payment_id'] = requestParameters.recurringPaymentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }

        const response = await this.request({
            path: `/v2/invoices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceFromJSON));
    }

    /**
     * Get all Invoices
     */
    async getInvoices(requestParameters: GetInvoicesRequest = {}): Promise<Array<Invoice>> {
        const response = await this.getInvoicesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Manually expire an invoice
     */
    private async expireInvoiceRaw(requestParameters: ExpireInvoiceRequest): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.invoiceId === null || requestParameters.invoiceId === undefined) {
            throw new runtime.RequiredError('invoiceId','Required parameter requestParameters.invoiceId was null or undefined when calling expireInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }

        const response = await this.request({
            path: `/invoices/{invoice_id}/expire!`.replace(`{${"invoice_id"}}`, encodeURIComponent(String(requestParameters.invoiceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * Manually expire an invoice
     */
    async expireInvoice(requestParameters: ExpireInvoiceRequest): Promise<Invoice> {
        const response = await this.expireInvoiceRaw(requestParameters);
        return await response.value();
    }

}
