/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
/**
 * Response definition for a 400 Bad Request error when creating an invoice.
 * @export
 * @interface BadRequestError
 */
export interface BadRequestError {
    /**
     * The error code indicating the type of error that occurred.
     * @type {string}
     * @memberof BadRequestError
     */
    errorCode: BadRequestErrorErrorCodeEnum;
    /**
     * A human-readable error message that provides additional information about the error.
     * @type {string}
     * @memberof BadRequestError
     */
    message: string;
}


/**
 * @export
 */
export const BadRequestErrorErrorCodeEnum = {
    MaximumTransferAmountError: 'MAXIMUM_TRANSFER_AMOUNT_ERROR',
    NoCollectionMethodsError: 'NO_COLLECTION_METHODS_ERROR',
    EmailFormatError: 'EMAIL_FORMAT_ERROR',
    UnavailablePaymentMethodError: 'UNAVAILABLE_PAYMENT_METHOD_ERROR',
    UnsupportedCurrency: 'UNSUPPORTED_CURRENCY',
    MismatchCurrencyError: 'MISMATCH_CURRENCY_ERROR',
    InvalidReminderTime: 'INVALID_REMINDER_TIME'
} as const;
export type BadRequestErrorErrorCodeEnum = typeof BadRequestErrorErrorCodeEnum[keyof typeof BadRequestErrorErrorCodeEnum];


/**
 * Check if a given object implements the BadRequestError interface.
 */
export function instanceOfBadRequestError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "errorCode" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function BadRequestErrorFromJSON(json: any): BadRequestError {
    return BadRequestErrorFromJSONTyped(json, false);
}

export function BadRequestErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): BadRequestError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'errorCode': json['error_code'],
        'message': json['message'],
    };
}

export function BadRequestErrorToJSON(value?: BadRequestError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error_code': value.errorCode,
        'message': value.message,
    };
}

