/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
/**
 * An error object used to indicate a 403 Forbidden response related to invoice operations.
 * @export
 * @interface ForbiddenError
 */
export interface ForbiddenError {
    /**
     * The specific error code indicating that access to the invoice operation is suspended.
     * @type {string}
     * @memberof ForbiddenError
     */
    errorCode: ForbiddenErrorErrorCodeEnum;
    /**
     * A human-readable error message providing additional context about the 403 Forbidden response.
     * @type {string}
     * @memberof ForbiddenError
     */
    message: string;
}


/**
 * @export
 */
export const ForbiddenErrorErrorCodeEnum = {
    AccessSuspended: 'ACCESS_SUSPENDED'
} as const;
export type ForbiddenErrorErrorCodeEnum = typeof ForbiddenErrorErrorCodeEnum[keyof typeof ForbiddenErrorErrorCodeEnum];


/**
 * Check if a given object implements the ForbiddenError interface.
 */
export function instanceOfForbiddenError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "errorCode" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function ForbiddenErrorFromJSON(json: any): ForbiddenError {
    return ForbiddenErrorFromJSONTyped(json, false);
}

export function ForbiddenErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ForbiddenError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'errorCode': json['error_code'],
        'message': json['message'],
    };
}

export function ForbiddenErrorToJSON(value?: ForbiddenError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error_code': value.errorCode,
        'message': value.message,
    };
}

