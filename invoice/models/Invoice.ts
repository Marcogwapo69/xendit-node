/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { Bank } from './Bank';
import {
    BankFromJSON,
    BankFromJSONTyped,
    BankToJSON,
} from './Bank';
import type { ChannelProperties } from './ChannelProperties';
import {
    ChannelPropertiesFromJSON,
    ChannelPropertiesFromJSONTyped,
    ChannelPropertiesToJSON,
} from './ChannelProperties';
import type { CustomerObject } from './CustomerObject';
import {
    CustomerObjectFromJSON,
    CustomerObjectFromJSONTyped,
    CustomerObjectToJSON,
} from './CustomerObject';
import type { DirectDebit } from './DirectDebit';
import {
    DirectDebitFromJSON,
    DirectDebitFromJSONTyped,
    DirectDebitToJSON,
} from './DirectDebit';
import type { Ewallet } from './Ewallet';
import {
    EwalletFromJSON,
    EwalletFromJSONTyped,
    EwalletToJSON,
} from './Ewallet';
import type { InvoiceCurrency } from './InvoiceCurrency';
import {
    InvoiceCurrencyFromJSON,
    InvoiceCurrencyFromJSONTyped,
    InvoiceCurrencyToJSON,
} from './InvoiceCurrency';
import type { InvoiceFee } from './InvoiceFee';
import {
    InvoiceFeeFromJSON,
    InvoiceFeeFromJSONTyped,
    InvoiceFeeToJSON,
} from './InvoiceFee';
import type { InvoiceItem } from './InvoiceItem';
import {
    InvoiceItemFromJSON,
    InvoiceItemFromJSONTyped,
    InvoiceItemToJSON,
} from './InvoiceItem';
import type { InvoicePaymentMethod } from './InvoicePaymentMethod';
import {
    InvoicePaymentMethodFromJSON,
    InvoicePaymentMethodFromJSONTyped,
    InvoicePaymentMethodToJSON,
} from './InvoicePaymentMethod';
import type { InvoiceStatus } from './InvoiceStatus';
import {
    InvoiceStatusFromJSON,
    InvoiceStatusFromJSONTyped,
    InvoiceStatusToJSON,
} from './InvoiceStatus';
import type { NotificationPreference } from './NotificationPreference';
import {
    NotificationPreferenceFromJSON,
    NotificationPreferenceFromJSONTyped,
    NotificationPreferenceToJSON,
} from './NotificationPreference';
import type { Paylater } from './Paylater';
import {
    PaylaterFromJSON,
    PaylaterFromJSONTyped,
    PaylaterToJSON,
} from './Paylater';
import type { QrCode } from './QrCode';
import {
    QrCodeFromJSON,
    QrCodeFromJSONTyped,
    QrCodeToJSON,
} from './QrCode';
import type { RetailOutlet } from './RetailOutlet';
import {
    RetailOutletFromJSON,
    RetailOutletFromJSONTyped,
    RetailOutletToJSON,
} from './RetailOutlet';

/**
 * An object representing details for an invoice.
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * The unique identifier for the invoice.
     * @type {string}
     * @memberof Invoice
     */
    id?: string;
    /**
     * The external identifier for the invoice.
     * @type {string}
     * @memberof Invoice
     */
    externalId: string;
    /**
     * The user ID associated with the invoice.
     * @type {string}
     * @memberof Invoice
     */
    userId: string;
    /**
     * The email address of the payer.
     * @type {string}
     * @memberof Invoice
     */
    payerEmail?: string;
    /**
     * A description of the invoice.
     * @type {string}
     * @memberof Invoice
     */
    description?: string;
    /**
     * 
     * @type {InvoicePaymentMethod}
     * @memberof Invoice
     */
    paymentMethod?: InvoicePaymentMethod;
    /**
     * 
     * @type {InvoiceStatus}
     * @memberof Invoice
     */
    status: InvoiceStatus;
    /**
     * The name of the merchant.
     * @type {string}
     * @memberof Invoice
     */
    merchantName: string;
    /**
     * The URL of the merchant's profile picture.
     * @type {string}
     * @memberof Invoice
     */
    merchantProfilePictureUrl: string;
    /**
     * The locale or language used for the invoice.
     * @type {string}
     * @memberof Invoice
     */
    locale?: string;
    /**
     * The total amount of the invoice.
     * @type {number}
     * @memberof Invoice
     */
    amount: number;
    /**
     * Representing a date and time in ISO 8601 format.
     * @type {Date}
     * @memberof Invoice
     */
    expiryDate: Date;
    /**
     * The URL to view the invoice.
     * @type {string}
     * @memberof Invoice
     */
    invoiceUrl: string;
    /**
     * An array of available banks for payment.
     * @type {Array<Bank>}
     * @memberof Invoice
     */
    availableBanks: Array<Bank>;
    /**
     * An array of available retail outlets for payment.
     * @type {Array<RetailOutlet>}
     * @memberof Invoice
     */
    availableRetailOutlets: Array<RetailOutlet>;
    /**
     * An array of available e-wallets for payment.
     * @type {Array<Ewallet>}
     * @memberof Invoice
     */
    availableEwallets: Array<Ewallet>;
    /**
     * An array of available QR codes for payment.
     * @type {Array<QrCode>}
     * @memberof Invoice
     */
    availableQrCodes: Array<QrCode>;
    /**
     * An array of available direct debit options for payment.
     * @type {Array<DirectDebit>}
     * @memberof Invoice
     */
    availableDirectDebits: Array<DirectDebit>;
    /**
     * An array of available pay-later options for payment.
     * @type {Array<Paylater>}
     * @memberof Invoice
     */
    availablePaylaters: Array<Paylater>;
    /**
     * Indicates whether credit card payments should be excluded.
     * @type {boolean}
     * @memberof Invoice
     */
    shouldExcludeCreditCard?: boolean;
    /**
     * Indicates whether email notifications should be sent.
     * @type {boolean}
     * @memberof Invoice
     */
    shouldSendEmail: boolean;
    /**
     * Representing a date and time in ISO 8601 format.
     * @type {Date}
     * @memberof Invoice
     */
    created: Date;
    /**
     * Representing a date and time in ISO 8601 format.
     * @type {Date}
     * @memberof Invoice
     */
    updated: Date;
    /**
     * The URL to redirect to on successful payment.
     * @type {string}
     * @memberof Invoice
     */
    successRedirectUrl?: string;
    /**
     * The URL to redirect to on payment failure.
     * @type {string}
     * @memberof Invoice
     */
    failureRedirectUrl?: string;
    /**
     * Indicates whether credit card authentication is required.
     * @type {boolean}
     * @memberof Invoice
     */
    shouldAuthenticateCreditCard?: boolean;
    /**
     * 
     * @type {InvoiceCurrency}
     * @memberof Invoice
     */
    currency?: InvoiceCurrency;
    /**
     * An array of items included in the invoice.
     * @type {Array<InvoiceItem>}
     * @memberof Invoice
     */
    items?: Array<InvoiceItem>;
    /**
     * Indicates whether the virtual account is fixed.
     * @type {boolean}
     * @memberof Invoice
     */
    fixedVa?: boolean;
    /**
     * Representing a date and time in ISO 8601 format.
     * @type {Date}
     * @memberof Invoice
     */
    reminderDate?: Date;
    /**
     * 
     * @type {CustomerObject}
     * @memberof Invoice
     */
    customer?: CustomerObject;
    /**
     * 
     * @type {NotificationPreference}
     * @memberof Invoice
     */
    customerNotificationPreference?: NotificationPreference;
    /**
     * An array of fees associated with the invoice.
     * @type {Array<InvoiceFee>}
     * @memberof Invoice
     */
    fees?: Array<InvoiceFee>;
    /**
     * 
     * @type {ChannelProperties}
     * @memberof Invoice
     */
    channelProperties?: ChannelProperties;
}

/**
 * Check if a given object implements the Invoice interface.
 */
export function instanceOfInvoice(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "externalId" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "merchantName" in value;
    isInstance = isInstance && "merchantProfilePictureUrl" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "expiryDate" in value;
    isInstance = isInstance && "invoiceUrl" in value;
    isInstance = isInstance && "availableBanks" in value;
    isInstance = isInstance && "availableRetailOutlets" in value;
    isInstance = isInstance && "availableEwallets" in value;
    isInstance = isInstance && "availableQrCodes" in value;
    isInstance = isInstance && "availableDirectDebits" in value;
    isInstance = isInstance && "availablePaylaters" in value;
    isInstance = isInstance && "shouldSendEmail" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;

    return isInstance;
}

export function InvoiceFromJSON(json: any): Invoice {
    return InvoiceFromJSONTyped(json, false);
}

export function InvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invoice {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'externalId': json['external_id'],
        'userId': json['user_id'],
        'payerEmail': !exists(json, 'payer_email') ? undefined : json['payer_email'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'paymentMethod': !exists(json, 'payment_method') ? undefined : InvoicePaymentMethodFromJSON(json['payment_method']),
        'status': InvoiceStatusFromJSON(json['status']),
        'merchantName': json['merchant_name'],
        'merchantProfilePictureUrl': json['merchant_profile_picture_url'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
        'amount': json['amount'],
        'expiryDate': (new Date(json['expiry_date'])),
        'invoiceUrl': json['invoice_url'],
        'availableBanks': ((json['available_banks'] as Array<any>).map(BankFromJSON)),
        'availableRetailOutlets': ((json['available_retail_outlets'] as Array<any>).map(RetailOutletFromJSON)),
        'availableEwallets': ((json['available_ewallets'] as Array<any>).map(EwalletFromJSON)),
        'availableQrCodes': ((json['available_qr_codes'] as Array<any>).map(QrCodeFromJSON)),
        'availableDirectDebits': ((json['available_direct_debits'] as Array<any>).map(DirectDebitFromJSON)),
        'availablePaylaters': ((json['available_paylaters'] as Array<any>).map(PaylaterFromJSON)),
        'shouldExcludeCreditCard': !exists(json, 'should_exclude_credit_card') ? undefined : json['should_exclude_credit_card'],
        'shouldSendEmail': json['should_send_email'],
        'created': (new Date(json['created'])),
        'updated': (new Date(json['updated'])),
        'successRedirectUrl': !exists(json, 'success_redirect_url') ? undefined : json['success_redirect_url'],
        'failureRedirectUrl': !exists(json, 'failure_redirect_url') ? undefined : json['failure_redirect_url'],
        'shouldAuthenticateCreditCard': !exists(json, 'should_authenticate_credit_card') ? undefined : json['should_authenticate_credit_card'],
        'currency': !exists(json, 'currency') ? undefined : InvoiceCurrencyFromJSON(json['currency']),
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(InvoiceItemFromJSON)),
        'fixedVa': !exists(json, 'fixed_va') ? undefined : json['fixed_va'],
        'reminderDate': !exists(json, 'reminder_date') ? undefined : (new Date(json['reminder_date'])),
        'customer': !exists(json, 'customer') ? undefined : CustomerObjectFromJSON(json['customer']),
        'customerNotificationPreference': !exists(json, 'customer_notification_preference') ? undefined : NotificationPreferenceFromJSON(json['customer_notification_preference']),
        'fees': !exists(json, 'fees') ? undefined : ((json['fees'] as Array<any>).map(InvoiceFeeFromJSON)),
        'channelProperties': !exists(json, 'channel_properties') ? undefined : ChannelPropertiesFromJSON(json['channel_properties']),
    };
}

export function InvoiceToJSON(value?: Invoice | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'external_id': value.externalId,
        'user_id': value.userId,
        'payer_email': value.payerEmail,
        'description': value.description,
        'payment_method': InvoicePaymentMethodToJSON(value.paymentMethod),
        'status': InvoiceStatusToJSON(value.status),
        'merchant_name': value.merchantName,
        'merchant_profile_picture_url': value.merchantProfilePictureUrl,
        'locale': value.locale,
        'amount': value.amount,
        'expiry_date': (value.expiryDate.toISOString()),
        'invoice_url': value.invoiceUrl,
        'available_banks': ((value.availableBanks as Array<any>).map(BankToJSON)),
        'available_retail_outlets': ((value.availableRetailOutlets as Array<any>).map(RetailOutletToJSON)),
        'available_ewallets': ((value.availableEwallets as Array<any>).map(EwalletToJSON)),
        'available_qr_codes': ((value.availableQrCodes as Array<any>).map(QrCodeToJSON)),
        'available_direct_debits': ((value.availableDirectDebits as Array<any>).map(DirectDebitToJSON)),
        'available_paylaters': ((value.availablePaylaters as Array<any>).map(PaylaterToJSON)),
        'should_exclude_credit_card': value.shouldExcludeCreditCard,
        'should_send_email': value.shouldSendEmail,
        'created': (value.created.toISOString()),
        'updated': (value.updated.toISOString()),
        'success_redirect_url': value.successRedirectUrl,
        'failure_redirect_url': value.failureRedirectUrl,
        'should_authenticate_credit_card': value.shouldAuthenticateCreditCard,
        'currency': InvoiceCurrencyToJSON(value.currency),
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(InvoiceItemToJSON)),
        'fixed_va': value.fixedVa,
        'reminder_date': value.reminderDate === undefined ? undefined : (value.reminderDate.toISOString()),
        'customer': CustomerObjectToJSON(value.customer),
        'customer_notification_preference': NotificationPreferenceToJSON(value.customerNotificationPreference),
        'fees': value.fees === undefined ? undefined : ((value.fees as Array<any>).map(InvoiceFeeToJSON)),
        'channel_properties': ChannelPropertiesToJSON(value.channelProperties),
    };
}

