/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
/**
 * Response definition for a 404 Not Found error when creating an invoice.
 * @export
 * @interface InvoiceNotFoundError
 */
export interface InvoiceNotFoundError {
    /**
     * The error code indicating the type of error that occurred.
     * @type {string}
     * @memberof InvoiceNotFoundError
     */
    errorCode: InvoiceNotFoundErrorErrorCodeEnum;
    /**
     * A human-readable error message that provides additional information about the error.
     * @type {string}
     * @memberof InvoiceNotFoundError
     */
    message: string;
}


/**
 * @export
 */
export const InvoiceNotFoundErrorErrorCodeEnum = {
    CallbackVirtualAccountNotFoundError: 'CALLBACK_VIRTUAL_ACCOUNT_NOT_FOUND_ERROR',
    UniqueAccountNumberUnavailableError: 'UNIQUE_ACCOUNT_NUMBER_UNAVAILABLE_ERROR',
    PaymentCodeNotAvailableError: 'PAYMENT_CODE_NOT_AVAILABLE_ERROR'
} as const;
export type InvoiceNotFoundErrorErrorCodeEnum = typeof InvoiceNotFoundErrorErrorCodeEnum[keyof typeof InvoiceNotFoundErrorErrorCodeEnum];


/**
 * Check if a given object implements the InvoiceNotFoundError interface.
 */
export function instanceOfInvoiceNotFoundError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "errorCode" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function InvoiceNotFoundErrorFromJSON(json: any): InvoiceNotFoundError {
    return InvoiceNotFoundErrorFromJSONTyped(json, false);
}

export function InvoiceNotFoundErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): InvoiceNotFoundError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'errorCode': json['error_code'],
        'message': json['message'],
    };
}

export function InvoiceNotFoundErrorToJSON(value?: InvoiceNotFoundError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error_code': value.errorCode,
        'message': value.message,
    };
}

