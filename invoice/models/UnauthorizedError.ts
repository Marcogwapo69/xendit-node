/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
/**
 * An error object used to indicate unauthorized access to an invoice-related resource.
 * @export
 * @interface UnauthorizedError
 */
export interface UnauthorizedError {
    /**
     * The specific error code associated with the unauthorized access.
     * @type {string}
     * @memberof UnauthorizedError
     */
    errorCode: UnauthorizedErrorErrorCodeEnum;
    /**
     * A human-readable error message providing additional context about the unauthorized access.
     * @type {string}
     * @memberof UnauthorizedError
     */
    message: string;
}


/**
 * @export
 */
export const UnauthorizedErrorErrorCodeEnum = {
    InvalidApiKey: 'INVALID_API_KEY'
} as const;
export type UnauthorizedErrorErrorCodeEnum = typeof UnauthorizedErrorErrorCodeEnum[keyof typeof UnauthorizedErrorErrorCodeEnum];


/**
 * Check if a given object implements the UnauthorizedError interface.
 */
export function instanceOfUnauthorizedError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "errorCode" in value;
    isInstance = isInstance && "message" in value;

    return isInstance;
}

export function UnauthorizedErrorFromJSON(json: any): UnauthorizedError {
    return UnauthorizedErrorFromJSONTyped(json, false);
}

export function UnauthorizedErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): UnauthorizedError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'errorCode': json['error_code'],
        'message': json['message'],
    };
}

export function UnauthorizedErrorToJSON(value?: UnauthorizedError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error_code': value.errorCode,
        'message': value.message,
    };
}

