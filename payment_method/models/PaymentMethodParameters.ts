/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { BillingInformation } from './BillingInformation';
import {
    BillingInformationFromJSON,
    BillingInformationFromJSONTyped,
    BillingInformationToJSON,
} from './BillingInformation';
import type { CardParameters } from './CardParameters';
import {
    CardParametersFromJSON,
    CardParametersFromJSONTyped,
    CardParametersToJSON,
} from './CardParameters';
import type { DirectDebitParameters } from './DirectDebitParameters';
import {
    DirectDebitParametersFromJSON,
    DirectDebitParametersFromJSONTyped,
    DirectDebitParametersToJSON,
} from './DirectDebitParameters';
import type { EWalletParameters } from './EWalletParameters';
import {
    EWalletParametersFromJSON,
    EWalletParametersFromJSONTyped,
    EWalletParametersToJSON,
} from './EWalletParameters';
import type { OverTheCounterParameters } from './OverTheCounterParameters';
import {
    OverTheCounterParametersFromJSON,
    OverTheCounterParametersFromJSONTyped,
    OverTheCounterParametersToJSON,
} from './OverTheCounterParameters';
import type { PaymentMethodReusability } from './PaymentMethodReusability';
import {
    PaymentMethodReusabilityFromJSON,
    PaymentMethodReusabilityFromJSONTyped,
    PaymentMethodReusabilityToJSON,
} from './PaymentMethodReusability';
import type { PaymentMethodType } from './PaymentMethodType';
import {
    PaymentMethodTypeFromJSON,
    PaymentMethodTypeFromJSONTyped,
    PaymentMethodTypeToJSON,
} from './PaymentMethodType';
import type { QRCodeParameters } from './QRCodeParameters';
import {
    QRCodeParametersFromJSON,
    QRCodeParametersFromJSONTyped,
    QRCodeParametersToJSON,
} from './QRCodeParameters';
import type { VirtualAccountParameters } from './VirtualAccountParameters';
import {
    VirtualAccountParametersFromJSON,
    VirtualAccountParametersFromJSONTyped,
    VirtualAccountParametersToJSON,
} from './VirtualAccountParameters';

/**
 * 
 * @export
 * @interface PaymentMethodParameters
 */
export interface PaymentMethodParameters {
    /**
     * 
     * @type {PaymentMethodType}
     * @memberof PaymentMethodParameters
     */
    type: PaymentMethodType;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodParameters
     */
    country?: string | null;
    /**
     * 
     * @type {PaymentMethodReusability}
     * @memberof PaymentMethodParameters
     */
    reusability: PaymentMethodReusability;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodParameters
     */
    customerId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodParameters
     */
    referenceId?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodParameters
     */
    description?: string | null;
    /**
     * 
     * @type {CardParameters}
     * @memberof PaymentMethodParameters
     */
    card?: CardParameters;
    /**
     * 
     * @type {DirectDebitParameters}
     * @memberof PaymentMethodParameters
     */
    directDebit?: DirectDebitParameters;
    /**
     * 
     * @type {EWalletParameters}
     * @memberof PaymentMethodParameters
     */
    ewallet?: EWalletParameters;
    /**
     * 
     * @type {OverTheCounterParameters}
     * @memberof PaymentMethodParameters
     */
    overTheCounter?: OverTheCounterParameters;
    /**
     * 
     * @type {VirtualAccountParameters}
     * @memberof PaymentMethodParameters
     */
    virtualAccount?: VirtualAccountParameters;
    /**
     * 
     * @type {QRCodeParameters}
     * @memberof PaymentMethodParameters
     */
    qrCode?: QRCodeParameters;
    /**
     * 
     * @type {object}
     * @memberof PaymentMethodParameters
     */
    metadata?: object | null;
    /**
     * 
     * @type {BillingInformation}
     * @memberof PaymentMethodParameters
     */
    billingInformation?: BillingInformation | null;
}

/**
 * Check if a given object implements the PaymentMethodParameters interface.
 */
export function instanceOfPaymentMethodParameters(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "reusability" in value;

    return isInstance;
}

export function PaymentMethodParametersFromJSON(json: any): PaymentMethodParameters {
    return PaymentMethodParametersFromJSONTyped(json, false);
}

export function PaymentMethodParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentMethodParameters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': PaymentMethodTypeFromJSON(json['type']),
        'country': !exists(json, 'country') ? undefined : json['country'],
        'reusability': PaymentMethodReusabilityFromJSON(json['reusability']),
        'customerId': !exists(json, 'customer_id') ? undefined : json['customer_id'],
        'referenceId': !exists(json, 'reference_id') ? undefined : json['reference_id'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'card': !exists(json, 'card') ? undefined : CardParametersFromJSON(json['card']),
        'directDebit': !exists(json, 'direct_debit') ? undefined : DirectDebitParametersFromJSON(json['direct_debit']),
        'ewallet': !exists(json, 'ewallet') ? undefined : EWalletParametersFromJSON(json['ewallet']),
        'overTheCounter': !exists(json, 'over_the_counter') ? undefined : OverTheCounterParametersFromJSON(json['over_the_counter']),
        'virtualAccount': !exists(json, 'virtual_account') ? undefined : VirtualAccountParametersFromJSON(json['virtual_account']),
        'qrCode': !exists(json, 'qr_code') ? undefined : QRCodeParametersFromJSON(json['qr_code']),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'billingInformation': !exists(json, 'billing_information') ? undefined : BillingInformationFromJSON(json['billing_information']),
    };
}

export function PaymentMethodParametersToJSON(value?: PaymentMethodParameters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': PaymentMethodTypeToJSON(value.type),
        'country': value.country,
        'reusability': PaymentMethodReusabilityToJSON(value.reusability),
        'customer_id': value.customerId,
        'reference_id': value.referenceId,
        'description': value.description,
        'card': CardParametersToJSON(value.card),
        'direct_debit': DirectDebitParametersToJSON(value.directDebit),
        'ewallet': EWalletParametersToJSON(value.ewallet),
        'over_the_counter': OverTheCounterParametersToJSON(value.overTheCounter),
        'virtual_account': VirtualAccountParametersToJSON(value.virtualAccount),
        'qr_code': QRCodeParametersToJSON(value.qrCode),
        'metadata': value.metadata,
        'billing_information': BillingInformationToJSON(value.billingInformation),
    };
}

