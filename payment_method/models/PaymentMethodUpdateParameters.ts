/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { OverTheCounterUpdateParameters } from './OverTheCounterUpdateParameters';
import {
    OverTheCounterUpdateParametersFromJSON,
    OverTheCounterUpdateParametersFromJSONTyped,
    OverTheCounterUpdateParametersToJSON,
} from './OverTheCounterUpdateParameters';
import type { PaymentMethodReusability } from './PaymentMethodReusability';
import {
    PaymentMethodReusabilityFromJSON,
    PaymentMethodReusabilityFromJSONTyped,
    PaymentMethodReusabilityToJSON,
} from './PaymentMethodReusability';
import type { PaymentMethodStatus } from './PaymentMethodStatus';
import {
    PaymentMethodStatusFromJSON,
    PaymentMethodStatusFromJSONTyped,
    PaymentMethodStatusToJSON,
} from './PaymentMethodStatus';
import type { VirtualAccountUpdateParameters } from './VirtualAccountUpdateParameters';
import {
    VirtualAccountUpdateParametersFromJSON,
    VirtualAccountUpdateParametersFromJSONTyped,
    VirtualAccountUpdateParametersToJSON,
} from './VirtualAccountUpdateParameters';

/**
 * 
 * @export
 * @interface PaymentMethodUpdateParameters
 */
export interface PaymentMethodUpdateParameters {
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodUpdateParameters
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodUpdateParameters
     */
    referenceId?: string;
    /**
     * 
     * @type {PaymentMethodReusability}
     * @memberof PaymentMethodUpdateParameters
     */
    reusability?: PaymentMethodReusability;
    /**
     * 
     * @type {PaymentMethodStatus}
     * @memberof PaymentMethodUpdateParameters
     */
    status?: PaymentMethodStatus;
    /**
     * 
     * @type {OverTheCounterUpdateParameters}
     * @memberof PaymentMethodUpdateParameters
     */
    overTheCounter?: OverTheCounterUpdateParameters;
    /**
     * 
     * @type {VirtualAccountUpdateParameters}
     * @memberof PaymentMethodUpdateParameters
     */
    virtualAccount?: VirtualAccountUpdateParameters;
}

/**
 * Check if a given object implements the PaymentMethodUpdateParameters interface.
 */
export function instanceOfPaymentMethodUpdateParameters(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaymentMethodUpdateParametersFromJSON(json: any): PaymentMethodUpdateParameters {
    return PaymentMethodUpdateParametersFromJSONTyped(json, false);
}

export function PaymentMethodUpdateParametersFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentMethodUpdateParameters {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'referenceId': !exists(json, 'reference_id') ? undefined : json['reference_id'],
        'reusability': !exists(json, 'reusability') ? undefined : PaymentMethodReusabilityFromJSON(json['reusability']),
        'status': !exists(json, 'status') ? undefined : PaymentMethodStatusFromJSON(json['status']),
        'overTheCounter': !exists(json, 'over_the_counter') ? undefined : OverTheCounterUpdateParametersFromJSON(json['over_the_counter']),
        'virtualAccount': !exists(json, 'virtual_account') ? undefined : VirtualAccountUpdateParametersFromJSON(json['virtual_account']),
    };
}

export function PaymentMethodUpdateParametersToJSON(value?: PaymentMethodUpdateParameters | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'reference_id': value.referenceId,
        'reusability': PaymentMethodReusabilityToJSON(value.reusability),
        'status': PaymentMethodStatusToJSON(value.status),
        'over_the_counter': OverTheCounterUpdateParametersToJSON(value.overTheCounter),
        'virtual_account': VirtualAccountUpdateParametersToJSON(value.virtualAccount),
    };
}

