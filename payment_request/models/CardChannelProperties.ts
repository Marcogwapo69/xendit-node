/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
/**
 * Card Channel Properties
 * @export
 * @interface CardChannelProperties
 */
export interface CardChannelProperties {
    /**
     * To indicate whether to perform 3DS during the linking phase
     * @type {boolean}
     * @memberof CardChannelProperties
     */
    skipThreeDSecure?: boolean | null;
    /**
     * URL where the end-customer is redirected if the authorization is successful
     * @type {string}
     * @memberof CardChannelProperties
     */
    successReturnUrl?: string | null;
    /**
     * URL where the end-customer is redirected if the authorization failed
     * @type {string}
     * @memberof CardChannelProperties
     */
    failureReturnUrl?: string | null;
    /**
     * Type of “credential-on-file” / “card-on-file” payment being made. Indicate that this payment uses a previously linked Payment Method for charging.
     * @type {string}
     * @memberof CardChannelProperties
     */
    cardonfileType?: string | null;
    /**
     * Tag for a Merchant ID that you want to associate this payment with. For merchants using their own MIDs to specify which MID they want to use
     * @type {string}
     * @memberof CardChannelProperties
     */
    merchantIdTag?: string;
    /**
     * 
     * @type {Date}
     * @memberof CardChannelProperties
     */
    expiresAt?: Date;
}

/**
 * Check if a given object implements the CardChannelProperties interface.
 */
export function instanceOfCardChannelProperties(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CardChannelPropertiesFromJSON(json: any): CardChannelProperties {
    return CardChannelPropertiesFromJSONTyped(json, false);
}

export function CardChannelPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): CardChannelProperties {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'skipThreeDSecure': !exists(json, 'skip_three_d_secure') ? undefined : json['skip_three_d_secure'],
        'successReturnUrl': !exists(json, 'success_return_url') ? undefined : json['success_return_url'],
        'failureReturnUrl': !exists(json, 'failure_return_url') ? undefined : json['failure_return_url'],
        'cardonfileType': !exists(json, 'cardonfile_type') ? undefined : json['cardonfile_type'],
        'merchantIdTag': !exists(json, 'merchant_id_tag') ? undefined : json['merchant_id_tag'],
        'expiresAt': !exists(json, 'expires_at') ? undefined : (new Date(json['expires_at'])),
    };
}

export function CardChannelPropertiesToJSON(value?: CardChannelProperties | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'skip_three_d_secure': value.skipThreeDSecure,
        'success_return_url': value.successReturnUrl,
        'failure_return_url': value.failureReturnUrl,
        'cardonfile_type': value.cardonfileType,
        'merchant_id_tag': value.merchantIdTag,
        'expires_at': value.expiresAt === undefined ? undefined : (value.expiresAt.toISOString()),
    };
}

