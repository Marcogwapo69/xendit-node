/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */

import { exists, mapValues } from '../../runtime';
import type { PaymentMethod } from './PaymentMethod';
import {
    PaymentMethodFromJSON,
    PaymentMethodFromJSONTyped,
    PaymentMethodToJSON,
} from './PaymentMethod';
import type { PaymentRequestChannelProperties } from './PaymentRequestChannelProperties';
import {
    PaymentRequestChannelPropertiesFromJSON,
    PaymentRequestChannelPropertiesFromJSONTyped,
    PaymentRequestChannelPropertiesToJSON,
} from './PaymentRequestChannelProperties';

/**
 * Represents the actual funds transaction/attempt made to a payment method
 * @export
 * @interface PaymentCallbackData
 */
export interface PaymentCallbackData {
    /**
     * 
     * @type {string}
     * @memberof PaymentCallbackData
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentCallbackData
     */
    paymentRequestId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentCallbackData
     */
    referenceId: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentCallbackData
     */
    customerId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentCallbackData
     */
    currency: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentCallbackData
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof PaymentCallbackData
     */
    country: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentCallbackData
     */
    status: string;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof PaymentCallbackData
     */
    paymentMethod: PaymentMethod;
    /**
     * 
     * @type {PaymentRequestChannelProperties}
     * @memberof PaymentCallbackData
     */
    channelProperties?: PaymentRequestChannelProperties | null;
    /**
     * 
     * @type {object}
     * @memberof PaymentCallbackData
     */
    paymentDetail?: object | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentCallbackData
     */
    failureCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaymentCallbackData
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentCallbackData
     */
    updated: string;
    /**
     * 
     * @type {object}
     * @memberof PaymentCallbackData
     */
    metadata?: object | null;
}

/**
 * Check if a given object implements the PaymentCallbackData interface.
 */
export function instanceOfPaymentCallbackData(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "referenceId" in value;
    isInstance = isInstance && "currency" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "country" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "paymentMethod" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "updated" in value;

    return isInstance;
}

export function PaymentCallbackDataFromJSON(json: any): PaymentCallbackData {
    return PaymentCallbackDataFromJSONTyped(json, false);
}

export function PaymentCallbackDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentCallbackData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'paymentRequestId': !exists(json, 'payment_request_id') ? undefined : json['payment_request_id'],
        'referenceId': json['reference_id'],
        'customerId': !exists(json, 'customer_id') ? undefined : json['customer_id'],
        'currency': json['currency'],
        'amount': json['amount'],
        'country': json['country'],
        'status': json['status'],
        'paymentMethod': PaymentMethodFromJSON(json['payment_method']),
        'channelProperties': !exists(json, 'channel_properties') ? undefined : PaymentRequestChannelPropertiesFromJSON(json['channel_properties']),
        'paymentDetail': !exists(json, 'payment_detail') ? undefined : json['payment_detail'],
        'failureCode': !exists(json, 'failure_code') ? undefined : json['failure_code'],
        'created': json['created'],
        'updated': json['updated'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function PaymentCallbackDataToJSON(value?: PaymentCallbackData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'payment_request_id': value.paymentRequestId,
        'reference_id': value.referenceId,
        'customer_id': value.customerId,
        'currency': value.currency,
        'amount': value.amount,
        'country': value.country,
        'status': value.status,
        'payment_method': PaymentMethodToJSON(value.paymentMethod),
        'channel_properties': PaymentRequestChannelPropertiesToJSON(value.channelProperties),
        'payment_detail': value.paymentDetail,
        'failure_code': value.failureCode,
        'created': value.created,
        'updated': value.updated,
        'metadata': value.metadata,
    };
}

