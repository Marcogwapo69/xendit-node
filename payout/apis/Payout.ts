/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */


import * as runtime from '../../runtime';
import type {
  Channel,
  ChannelCategory,
  CreatePayoutRequest,
  GetPayouts200Response,
  GetPayouts200ResponseDataInner,
} from '../models';
import {
    ChannelFromJSON,
    ChannelToJSON,
    ChannelCategoryFromJSON,
    ChannelCategoryToJSON,
    CreatePayoutRequestFromJSON,
    CreatePayoutRequestToJSON,
    GetPayouts200ResponseFromJSON,
    GetPayouts200ResponseToJSON,
    GetPayouts200ResponseDataInnerFromJSON,
    GetPayouts200ResponseDataInnerToJSON,
} from '../models';

export interface CancelPayoutRequest {
    id: string;
    idempotencyKey?: string;
}

export interface CreatePayoutOperationRequest {
    idempotencyKey: string;
    forUserId?: string;
    data?: CreatePayoutRequest;
}

export interface GetPayoutByIdRequest {
    id: string;
    idempotencyKey?: string;
}

export interface GetPayoutChannelsRequest {
    currency?: string;
    channelCategory?: Array<ChannelCategory>;
    channelCode?: string;
    idempotencyKey?: string;
}

export interface GetPayoutsRequest {
    referenceId: string;
    limit?: number;
    afterId?: string;
    beforeId?: string;
    idempotencyKey?: string;
}

/**
 * 
 */
export class PayoutApi extends runtime.BaseAPI {

    secretKey: string = "";
    xenditURL: string = "";

    constructor({secretKey, xenditURL}: {secretKey: string, xenditURL?: string}) {
        const conf = new runtime.Configuration({
            basePath: xenditURL || 'https://api.xendit.co'
        })
        super(conf)
        this.secretKey = secretKey;
    }

    /**
     * API to cancel requested payouts that have not yet been sent to partner banks and e-wallets. Cancellation is possible if the payout has not been sent out via our partner and when payout status is ACCEPTED.
     */
    private async cancelPayoutRaw(requestParameters: CancelPayoutRequest): Promise<runtime.ApiResponse<GetPayouts200ResponseDataInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancelPayout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/v2/payouts/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPayouts200ResponseDataInnerFromJSON(jsonValue));
    }

    /**
     * API to cancel requested payouts that have not yet been sent to partner banks and e-wallets. Cancellation is possible if the payout has not been sent out via our partner and when payout status is ACCEPTED.
     */
    async cancelPayout(requestParameters: CancelPayoutRequest): Promise<GetPayouts200ResponseDataInner> {
        const response = await this.cancelPayoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * API to send money at scale to bank accounts & eWallets
     */
    private async createPayoutRaw(requestParameters: CreatePayoutOperationRequest): Promise<runtime.ApiResponse<GetPayouts200ResponseDataInner>> {
        if (requestParameters.idempotencyKey === null || requestParameters.idempotencyKey === undefined) {
            throw new runtime.RequiredError('idempotencyKey','Required parameter requestParameters.idempotencyKey was null or undefined when calling createPayout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }

        const response = await this.request({
            path: `/v2/payouts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePayoutRequestToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPayouts200ResponseDataInnerFromJSON(jsonValue));
    }

    /**
     * API to send money at scale to bank accounts & eWallets
     */
    async createPayout(requestParameters: CreatePayoutOperationRequest): Promise<GetPayouts200ResponseDataInner> {
        const response = await this.createPayoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * API to fetch the current status, or details of the payout
     */
    private async getPayoutByIdRaw(requestParameters: GetPayoutByIdRequest): Promise<runtime.ApiResponse<GetPayouts200ResponseDataInner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPayoutById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/v2/payouts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPayouts200ResponseDataInnerFromJSON(jsonValue));
    }

    /**
     * API to fetch the current status, or details of the payout
     */
    async getPayoutById(requestParameters: GetPayoutByIdRequest): Promise<GetPayouts200ResponseDataInner> {
        const response = await this.getPayoutByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * API providing the current list of banks and e-wallets we support for payouts for both regions
     */
    private async getPayoutChannelsRaw(requestParameters: GetPayoutChannelsRequest): Promise<runtime.ApiResponse<Array<Channel>>> {
        const queryParameters: any = {};

        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }

        if (requestParameters.channelCategory) {
            queryParameters['channel_category'] = requestParameters.channelCategory.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.channelCode !== undefined) {
            queryParameters['channel_code'] = requestParameters.channelCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/payouts_channels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChannelFromJSON));
    }

    /**
     * API providing the current list of banks and e-wallets we support for payouts for both regions
     */
    async getPayoutChannels(requestParameters: GetPayoutChannelsRequest = {}): Promise<Array<Channel>> {
        const response = await this.getPayoutChannelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * API to retrieve all matching payouts with reference ID
     */
    private async getPayoutsRaw(requestParameters: GetPayoutsRequest): Promise<runtime.ApiResponse<GetPayouts200Response>> {
        if (requestParameters.referenceId === null || requestParameters.referenceId === undefined) {
            throw new runtime.RequiredError('referenceId','Required parameter requestParameters.referenceId was null or undefined when calling getPayouts.');
        }

        const queryParameters: any = {};

        if (requestParameters.referenceId !== undefined) {
            queryParameters['reference_id'] = requestParameters.referenceId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }

        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        const response = await this.request({
            path: `/v2/payouts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPayouts200ResponseFromJSON(jsonValue));
    }

    /**
     * API to retrieve all matching payouts with reference ID
     */
    async getPayouts(requestParameters: GetPayoutsRequest): Promise<GetPayouts200Response> {
        const response = await this.getPayoutsRaw(requestParameters);
        return await response.value();
    }

}
