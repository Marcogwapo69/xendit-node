/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This file is auto generated by Xendit.
 * Do not edit the class manually.
 * Improvements? Share your ideas at https://github.com/xendit/xendit-node
 */


import * as runtime from '../../runtime';
import type {
  CreateRefund,
  CreateRefund400Response,
  CreateRefund403Response,
  CreateRefund404Response,
  CreateRefund409Response,
  CreateRefund503Response,
  GetAllRefundsDefaultResponse,
  Refund,
  RefundList,
} from '../models';
import {
    CreateRefundFromJSON,
    CreateRefundToJSON,
    CreateRefund400ResponseFromJSON,
    CreateRefund400ResponseToJSON,
    CreateRefund403ResponseFromJSON,
    CreateRefund403ResponseToJSON,
    CreateRefund404ResponseFromJSON,
    CreateRefund404ResponseToJSON,
    CreateRefund409ResponseFromJSON,
    CreateRefund409ResponseToJSON,
    CreateRefund503ResponseFromJSON,
    CreateRefund503ResponseToJSON,
    GetAllRefundsDefaultResponseFromJSON,
    GetAllRefundsDefaultResponseToJSON,
    RefundFromJSON,
    RefundToJSON,
    RefundListFromJSON,
    RefundListToJSON,
} from '../models';

export interface CreateRefundRequest {
    idempotencyKey?: string;
    forUserId?: string;
    data?: CreateRefund;
}

export interface GetRefundRequest {
    refundID: string;
    idempotencyKey?: string;
    forUserId?: string;
}

export interface GetAllRefundsRequest {
    forUserId?: string;
    paymentRequestId?: string;
    invoiceId?: string;
    paymentMethodType?: string;
    channelCode?: string;
    limit?: number;
    afterId?: string;
    beforeId?: string;
}

export interface CancelRefundRequest {
    refundID: string;
    idempotencyKey?: string;
    forUserId?: string;
}

/**
 * 
 */
export class RefundApi extends runtime.BaseAPI {

    secretKey: string = "";
    xenditURL: string = "";

    constructor({secretKey, xenditURL}: {secretKey: string, xenditURL?: string}) {
        const conf = new runtime.Configuration({
            basePath: xenditURL || 'https://api.xendit.co'
        })
        super(conf)
        this.secretKey = secretKey;
    }

    /**
     */
    private async createRefundRaw(requestParameters: CreateRefundRequest): Promise<runtime.ApiResponse<Refund>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }

        const response = await this.request({
            path: `/refunds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRefundToJSON(requestParameters.data),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundFromJSON(jsonValue));
    }

    /**
     */
    async createRefund(requestParameters: CreateRefundRequest = {}): Promise<Refund> {
        const response = await this.createRefundRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    private async getRefundRaw(requestParameters: GetRefundRequest): Promise<runtime.ApiResponse<Refund>> {
        if (requestParameters.refundID === null || requestParameters.refundID === undefined) {
            throw new runtime.RequiredError('refundID','Required parameter requestParameters.refundID was null or undefined when calling getRefund.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }

        const response = await this.request({
            path: `/refunds/{refundID}`.replace(`{${"refundID"}}`, encodeURIComponent(String(requestParameters.refundID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundFromJSON(jsonValue));
    }

    /**
     */
    async getRefund(requestParameters: GetRefundRequest): Promise<Refund> {
        const response = await this.getRefundRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    private async getAllRefundsRaw(requestParameters: GetAllRefundsRequest): Promise<runtime.ApiResponse<RefundList>> {
        const queryParameters: any = {};

        if (requestParameters.paymentRequestId !== undefined) {
            queryParameters['payment_request_id'] = requestParameters.paymentRequestId;
        }

        if (requestParameters.invoiceId !== undefined) {
            queryParameters['invoice_id'] = requestParameters.invoiceId;
        }

        if (requestParameters.paymentMethodType !== undefined) {
            queryParameters['payment_method_type'] = requestParameters.paymentMethodType;
        }

        if (requestParameters.channelCode !== undefined) {
            queryParameters['channel_code'] = requestParameters.channelCode;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.afterId !== undefined) {
            queryParameters['after_id'] = requestParameters.afterId;
        }

        if (requestParameters.beforeId !== undefined) {
            queryParameters['before_id'] = requestParameters.beforeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }

        const response = await this.request({
            path: `/refunds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundListFromJSON(jsonValue));
    }

    /**
     */
    async getAllRefunds(requestParameters: GetAllRefundsRequest = {}): Promise<RefundList> {
        const response = await this.getAllRefundsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    private async cancelRefundRaw(requestParameters: CancelRefundRequest): Promise<runtime.ApiResponse<Refund>> {
        if (requestParameters.refundID === null || requestParameters.refundID === undefined) {
            throw new runtime.RequiredError('refundID','Required parameter requestParameters.refundID was null or undefined when calling cancelRefund.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters["Authorization"] = "Basic " + btoa(this.secretKey + ":");

        if (requestParameters.idempotencyKey !== undefined && requestParameters.idempotencyKey !== null) {
            headerParameters['idempotency-key'] = String(requestParameters.idempotencyKey);
        }

        if (requestParameters.forUserId !== undefined && requestParameters.forUserId !== null) {
            headerParameters['for-user-id'] = String(requestParameters.forUserId);
        }

        const response = await this.request({
            path: `/refunds/{refundID}/cancel`.replace(`{${"refundID"}}`, encodeURIComponent(String(requestParameters.refundID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundFromJSON(jsonValue));
    }

    /**
     */
    async cancelRefund(requestParameters: CancelRefundRequest): Promise<Refund> {
        const response = await this.cancelRefundRaw(requestParameters);
        return await response.value();
    }

}
